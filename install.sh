#!/bin/bash

# =============================================================================
# üöÄ –§–ò–ù–ê–ù–°–û–í–´–ô AI DASHBOARD - –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –£–°–¢–ê–ù–û–í–ö–ò
# =============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Financial AI Dashboard —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –ù–ë –†–ö –∏ n8n

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC} ${CYAN}$1${NC} ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        DISTRO=$(lsb_release -si 2>/dev/null || echo "Unknown")
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos" 
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    else
        OS="unknown"
    fi
    
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    print_header "–ü–†–û–í–ï–†–ö–ê DOCKER"
    
    if command -v docker &> /dev/null && command -v docker compose &> /dev/null; then
        print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker --version
        docker compose version
        return 0
    else
        print_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker:"
        echo "‚Ä¢ Ubuntu/Debian: sudo apt update && sudo apt install docker.io docker-compose-plugin"
        echo "‚Ä¢ CentOS/RHEL: sudo yum install docker docker-compose"  
        echo "‚Ä¢ macOS: https://docs.docker.com/desktop/mac/install/"
        echo "‚Ä¢ Windows: https://docs.docker.com/desktop/windows/install/"
        echo
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_header "–ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í"
    
    PORTS=(8000 5432 6379 5678 3000 8080)
    OCCUPIED_PORTS=()
    
    for port in "${PORTS[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1 || netstat -tuln 2>/dev/null | grep -q ":$port "; then
            OCCUPIED_PORTS+=($port)
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç"
        else
            print_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
    
    if [ ${#OCCUPIED_PORTS[@]} -ne 0 ]; then
        echo
        print_warning "–°–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã: ${OCCUPIED_PORTS[*]}"
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ —ç—Ç–∏—Ö –ø–æ—Ä—Ç–∞—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
create_project_structure() {
    print_header "–°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p {logs,static/{reports,uploads},data/cache,ssl,n8n/workflows,backups}
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
    cat > .gitignore << 'EOF'
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env
.env.local
.env.production

# –õ–æ–≥–∏
logs/
*.log

# –ó–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
static/uploads/*
!static/uploads/.gitkeep

# –ö–µ—à
data/cache/
*.cache

# SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
ssl/*.pem
ssl/*.key

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
*.db
*.sqlite3

# Python
__pycache__/
*.pyc
*.pyo
*.egg-info/
venv/
env/

# Docker
docker-compose.override.yml

# Backups
backups/
*.sql
*.dump

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF

    touch static/uploads/.gitkeep
    
    print_success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_header "–ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø"
    
    if [ ! -f .env ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ .env.example"
        cp .env.example .env
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        SECRET_KEY=$(openssl rand -base64 32 2>/dev/null || date | md5sum | cut -d' ' -f1)
        POSTGRES_PASSWORD=$(openssl rand -base64 16 2>/dev/null || date +%s | sha256sum | cut -d' ' -f1 | head -c 16)
        N8N_PASSWORD=$(openssl rand -base64 12 2>/dev/null || date +%s | sha1sum | cut -d' ' -f1 | head -c 12)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
        sed -i "s/finai-super-secret-jwt-key-change-this-in-production-please/$SECRET_KEY/g" .env
        sed -i "s/finai_very_strong_password_2024/$POSTGRES_PASSWORD/g" .env  
        sed -i "s/n8n_secure_password_2024/$N8N_PASSWORD/g" .env
        
        print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
    else
        print_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    source .env
    
    if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "sk-your-openai-api-key-here" ]; then
        echo
        print_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
        print_info "–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com/api-keys"
        print_info "–ò –æ–±–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env"
        echo
        echo -e "${YELLOW}–ë–µ–∑ OpenAI API –∫–ª—é—á–∞ AI —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ${NC}"
        echo
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_header "–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
    
    print_info "–ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker compose pull
    
    print_info "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    docker compose build
    
    print_info "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose up -d
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    print_header "–û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í"
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if docker compose exec -T postgres pg_isready -U finai_user >/dev/null 2>&1; then
            print_success "PostgreSQL –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        ((timeout -= 2))
        echo -n "."
    done
    
    if [ $timeout -le 0 ]; then
        print_error "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è PostgreSQL"
        exit 1
    fi
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ Financial AI Dashboard..."
    timeout=90
    while [ $timeout -gt 0 ]; do
        if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            print_success "Financial AI Dashboard –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 3
        ((timeout -= 3))
        echo -n "."
    done
    
    if [ $timeout -le 0 ]; then
        print_warning "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è Financial AI Dashboard (–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...)"
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
initialize_demo_data() {
    print_header "–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ï–ú–û –î–ê–ù–ù–´–•"
    
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    if curl -f -X POST "http://localhost:8000/api/init-demo" >/dev/null 2>&1; then
        print_success "–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ: curl -X POST 'http://localhost:8000/api/init-demo'"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
check_system_status() {
    print_header "–ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´"
    
    echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker compose ps
    
    echo
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # Financial AI Dashboard
    if curl -f http://localhost:8000/health >/dev/null 2>&1; then
        print_success "Financial AI Dashboard: http://localhost:8000 ‚úÖ"
    else
        print_error "Financial AI Dashboard: http://localhost:8000 ‚ùå"
    fi
    
    # n8n
    if curl -f http://localhost:5678 >/dev/null 2>&1; then
        print_success "n8n Automation: http://localhost:5678 ‚úÖ"
    else
        print_warning "n8n Automation: http://localhost:5678 ‚ö†Ô∏è"
    fi
    
    # PostgreSQL
    if docker compose exec -T postgres pg_isready -U finai_user >/dev/null 2>&1; then
        print_success "PostgreSQL Database ‚úÖ"
    else
        print_error "PostgreSQL Database ‚ùå"
    fi
    
    # Redis
    if docker compose exec -T redis redis-cli ping >/dev/null 2>&1; then
        print_success "Redis Cache ‚úÖ"
    else
        print_warning "Redis Cache ‚ö†Ô∏è"
    fi
}

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    print_header "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    
    echo -e "${GREEN}Financial AI Dashboard —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!${NC}"
    echo
    echo -e "${CYAN}üìä –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:${NC}"
    echo "   üè¶ Financial AI Dashboard: ${BLUE}http://localhost:8000${NC}"
    echo "   ü§ñ n8n Automation: ${BLUE}http://localhost:5678${NC}"
    echo "   üìà Grafana (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ${BLUE}http://localhost:3000${NC}"
    echo "   üóÑÔ∏è  pgAdmin (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ${BLUE}http://localhost:8080${NC}"
    echo
    echo -e "${CYAN}üë§ –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç:${NC}"
    echo "   üìß Email: ${GREEN}demo@finai.kz${NC}"
    echo "   üîë –ü–∞—Ä–æ–ª—å: ${GREEN}demo123${NC}"
    echo
    echo -e "${CYAN}üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:${NC}"
    echo "   üìä –°—Ç–∞—Ç—É—Å: ${YELLOW}docker compose ps${NC}"
    echo "   üìã –õ–æ–≥–∏: ${YELLOW}docker compose logs -f finai-app${NC}"
    echo "   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${YELLOW}docker compose down${NC}"
    echo "   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${YELLOW}docker compose restart${NC}"
    echo
    echo -e "${CYAN}ü§ñ n8n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:${NC}"
    echo "   Webhook URL: ${GREEN}http://localhost:8000/webhook/n8n/chat${NC}"
    echo "   –°—Ç–∞—Ç—É—Å: ${GREEN}http://localhost:8000/webhook/n8n/status${NC}"
    echo
    echo -e "${CYAN}üìä –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:${NC}"
    echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –ù–ë –†–ö"
    echo "   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π" 
    echo "   ‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    echo "   ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
    echo "   ‚úÖ n8n webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    echo "   ‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞
    source .env
    if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "sk-your-openai-api-key-here" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI!${NC}"
        echo
    fi
    
    echo -e "${PURPLE}üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear
    echo -e "${PURPLE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë     üè¶ FINANCIAL AI DASHBOARD - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê      ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é —Å AI          ‚ïë
‚ïë  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –±–∞–Ω–∫–æ–º –†–ö                      ‚ïë
‚ïë  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π                           ‚ïë
‚ïë  ‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ                              ‚ïë
‚ïë  ‚Ä¢ n8n –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ webhook                              ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    detect_os
    check_docker
    check_ports
    create_project_structure
    setup_environment
    start_services
    wait_for_services
    initialize_demo_data
    check_system_status
    show_final_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-install}" in
    "install"|"")
        main
        ;;
    "start")
        print_header "–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´"
        docker compose up -d
        print_success "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞"
        ;;
    "stop")
        print_header "–û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´"
        docker compose down
        print_success "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        ;;
    "restart")
        print_header "–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´"
        docker compose restart
        print_success "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
        ;;
    "status")
        check_system_status
        ;;
    "logs")
        print_header "–ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í"
        docker compose logs -f finai-app
        ;;
    "update")
        print_header "–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´"
        docker compose pull
        docker compose up -d --build
        print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        ;;
    "clean")
        print_header "–û–ß–ò–°–¢–ö–ê –°–ò–°–¢–ï–ú–´"
        read -p "‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker compose down -v
            docker system prune -f
            print_success "–°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞"
        else
            print_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        fi
        ;;
    "help")
        echo "Financial AI Dashboard - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π"
        echo
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  install    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  start      –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
        echo "  stop       –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"  
        echo "  restart    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
        echo "  status     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        echo "  logs       –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  update     –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
        echo "  clean      –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
        echo "  help       –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
        exit 1
        ;;
esac